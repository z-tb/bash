#
# user modify-able bashrc
#
#------------------------------------------------------------------
# display git branch in prompt if cwd is a repo. color change if
# modifications present
#------------------------------------------------------------------
display_git_branch()
{
   bcolor="\033[0;30;42m" # normally black on green. yellow on red if mods
   test $(is_branch_modified) -eq 1 && bcolor="\033[1;33;41m"

   b="`git branch 2> /dev/null | grep '^*' |  sed -e '#^[^*]#d' -e 's#[*\(\) ]##g'`"
   test ! -z "$b" &&  echo -e "$bcolor $b \033[0;00;0m"
}


#------------------------------------------------------------------
# returns 1 if git branch in current dirctory has been modified
#------------------------------------------------------------------
is_branch_modified()
{
   status=0
   test -n "`git diff 2>/dev/null`" && status=1
   echo $status
}

#------------------------------------------------------------------
# for use with gpull and other aliasse
#------------------------------------------------------------------
get_git_branch()
{
    git branch 2> /dev/null | grep '^*' |  sed -e '#^[^*]#d' -e 's#[*\(\) ]##g'
}

#------------------------------------------------------------------
# count the number of updates in /var/cache/apt/archives and report
# this can be run by hand, or called from a script
#------------------------------------------------------------------
pkg_update_report() 
{
   local deb_count
   deb_count=$(ls -1 /var/cache/apt/archives/*.deb 2>/dev/null | wc -l)

   if [ "$deb_count" -gt 0 ]; then
      echo -e "There are \e[92m$deb_count downloaded packages \e[0min the deb archive on this system.\e[0m"
   fi
}

#------------------------------------------------------------------
# report on age of current password
# only works with local users
#------------------------------------------------------------------
check_password_age() {

   # this won't work with some systems using AD auth since it requires sudo
   `test -n `grep $(whoami) /etc/passwd &>/dev/null`` || return

   # Constants
   age_warning_days=75
   age_critical_days=90


   local username="$1"
   local verbose="$2" # pass -v to always report

   # no username, assume the user running the function
   test -z "$username" && username=$LOGNAME

   # if -v passed as "$1", assume LOGNAME and verbose mode
   if [ "$username" = "-v" ];then 
      username=$LOGNAME
      verbose="-v"
   fi

   # Get the password aging information using chage
   local password_info=$(chage -l "$username" 2>/dev/null)

   if [[ -n "$password_info" ]]; then

       # Extract the last password change date
       local last_change=$(echo "$password_info" | grep "Last password change" | awk -F ': ' '{print $2}')
        
       if [[ -n "$last_change" ]]; then
           # Calculate the age of passwd in days
           local current_date=$(date +%s)
           local last_change_date=$(date -d "$last_change" +%s)
           local age_seconds=$((current_date - last_change_date))
           local age_days=$((age_seconds / 86400))  # 86400 seconds in a day
 
           # Determine color based on age of pass
           local color_code=""
           if (( age_days > age_critical_days )); then
               color_code="\033[91m"  # Red color
           elif (( age_days > age_warning_days )); then
               color_code="\033[93m"  # Yellow color
           fi

           # Determine if output should be printed
           local output=false
           if [[ "$verbose" == "-v" || age_days -gt $age_warning_days ]]; then
               output=true
           fi

           # Print output if necessary
           if [[ "$output" == true ]]; then
               echo -e "${color_code}Current password age for user $username is approximately $age_days days.\033[0m"
           fi

       else
           echo "Error: Failed to retrieve last password change date."
       fi
   else
       echo "Error: User $username not found or unable to retrieve password aging information."
   fi
}



#------------------------------------------------------------------
# create a tmux session for terminal sharing between logged-in users
#------------------------------------------------------------------
create_shared_tmux_session() {
    
    # Define color codes
    local GREEN='\033[0;32m'
    local YELLOW='\033[1;33m'
    local CYAN='\033[0;36m'
    local NC='\033[0m' # No Color

    # Generate a random 4-digit number
    local random_prefix=$(shuf -i 1000-9999 -n 1)

    # Create the session name using the random prefix
    local session_name="shared-${random_prefix}"

    # Print message with color
    echo -e "${CYAN}Starting new shared tmux session...${NC}"

    # Create a new tmux session in detached mode
    tmux new-session -d -s "$session_name"

    # Print the command to connect to the shared session with color
    echo -e "${YELLOW}To connect to the shared tmux session, use the following command:${NC}"
    echo -e "${GREEN}tmux attach-session -t $session_name${NC}"
}


#------------------------------------------------------------------
# enable a color prompt with git repo awareness
#------------------------------------------------------------------
enable_color_prompt() {
    # ANSI color codes
    local red_bg_yellow_fg='\[\e[1;33;41m\]'
    local cyan_fg_black_bg='\[\e[0;36;40m\]'
    local red_fg_black_bg='\[\e[0;31;40m\]'
    local green_fg_black_bg='\[\e[1;32;40m\]'
    local blue_bg_green_fg='\[\e[1;32;44m\]'
    local red_fg_black_bg2='\[\e[1;31;40m\]'
    local white_fg_black_bg='\[\e[0;37;40m\]'
    local reset_color='\[\e[0;0;00m\]'

    # prompt section colors
    local username_color=$red_bg_yellow_fg
    local hostname_color=$cyan_fg_black_bg
    local directory_color=$blue_bg_green_fg
    local time_date_color=$green_fg_black_bg
    local bracket_color=$red_fg_black_bg2
    local prompt_char_color=$white_fg_black_bg
    local reset_color=$reset_color

    # color prompt
    local prompt_char='$'
    if [ `id -u` -eq 0 ]; then prompt_char='#'; else username_color=$cyan_fg_black_bg; fi

    # formatting matters here; things are jammed to the left so the prompt stays left-justified in the consoel
    PS1="
$bracket_color[$time_date_color\$(date '+%I:%M') \$(date '+%D')\$(display_git_branch)$bracket_color]$reset_color
$bracket_color[$username_color\u$red_fg_black_bg@$hostname_color\h$directory_color \w$bracket_color]$reset_color
$prompt_char_color$prompt_char$reset_color "
    export PS1
}


#------------------------------------------------------------------
# set path explicity to add $HOME/bin if it exists
# this allows for custom user scripts to be placed in the user's path
#------------------------------------------------------------------
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
test -d $HOME/bin && PATH=$PATH:$HOME/bin
export PATH


#------------------------------------------------------------------
# aliases
#------------------------------------------------------------------
# [git]
alias gbr="git branch -a"
alias gco="git checkout"
alias gst="git status -s"
alias gls="git ls-tree --full-tree -r --name-only HEAD"
alias gpull='git pull origin `get_git_branch`'
alias gpush='git push origin `get_git_branch`; git push origin --tags'
alias glog='git log --pretty --oneline'
# [docker]
alias dcl='docker container ls -a'
alias dil='docker image ls -a'
# [system]
alias dir="ls -lart --color=yes"
alias tmush="create_shared_tmux_session"

# uncomment to run the update report on login
# pkg_update_report

# uncomment to report on age of system password
# check_password_age

# uncomment to enable color prompt
# enable_color_prompt
