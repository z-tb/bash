#
# user modify-able bashrc
#
#------------------------------------------------------------------
# returns 1 if git branch in current dirctory has been modified
#------------------------------------------------------------------
is_branch_modified()
{
   status=0
   test -n "`git diff 2>/dev/null`" && status=1
   echo $status
}

#------------------------------------------------------------------
# for use with gpull and other aliasse
#------------------------------------------------------------------
get_git_branch()
{
    git branch 2> /dev/null | grep '^*' |  sed -e '#^[^*]#d' -e 's#[*\(\) ]##g'
}

#------------------------------------------------------------------
# count the number of updates in /var/cache/apt/archives and report
# this can be run by hand, or called from a script
#------------------------------------------------------------------
pkg_update_report() 
{
   local deb_count
   deb_count=$(ls -1 /var/cache/apt/archives/*.deb 2>/dev/null | wc -l)

   if [ "$deb_count" -gt 0 ]; then
      echo -e "There are \e[92m$deb_count downloaded packages \e[0min the deb archive on this system.\e[0m"
   fi
}

#------------------------------------------------------------------
# report on age of current password
# only works with local users
#------------------------------------------------------------------
check_password_age() {

   # this won't work with some systems using AD auth since it requires sudo
   `test -n `grep $(whoami) /etc/passwd &>/dev/null`` || echo "NO"

   # Constants
   age_warning_days=75
   age_critical_days=90


   local username="$1"
   local verbose="$2" # pass -v to always report

   # no username, assume the user running the function
   test -z "$username" && username=$LOGNAME

   # if -v passed as "$1", assume LOGNAME and verbose mode
   if [ "$username" = "-v" ];then 
      username=$LOGNAME
      verbose="-v"
   fi

   # Get the password aging information using chage
   local password_info=$(chage -l "$username" 2>/dev/null)

   if [[ -n "$password_info" ]]; then

       # Extract the last password change date
       local last_change=$(echo "$password_info" | grep "Last password change" | awk -F ': ' '{print $2}')
        
       if [[ -n "$last_change" ]]; then
           # Calculate the age of passwd in days
           local current_date=$(date +%s)
           local last_change_date=$(date -d "$last_change" +%s)
           local age_seconds=$((current_date - last_change_date))
           local age_days=$((age_seconds / 86400))  # 86400 seconds in a day
 
           # Determine color based on age of pass
           local color_code=""
           if (( age_days > age_critical_days )); then
               color_code="\033[91m"  # Red color
           elif (( age_days > age_warning_days )); then
               color_code="\033[93m"  # Yellow color
           fi

           # Determine if output should be printed
           local output=false
           if [[ "$verbose" == "-v" || age_days -gt $age_warning_days ]]; then
               output=true
           fi

           # Print output if necessary
           if [[ "$output" == true ]]; then
               echo -e "${color_code}Current password age for user $username is approximately $age_days days.\033[0m"
           fi

       else
           echo "Error: Failed to retrieve last password change date."
       fi
   else
       echo "Error: User $username not found or unable to retrieve password aging information."
   fi
}



#------------------------------------------------------------------
# Function to enable a colorful, multi-line bash prompt
# add a function call below to enable it for every bash shell
#------------------------------------------------------------------
enable_color_prompt() {
    # color prompt
    PCHAR='$'; UC='\[\e[1;33;41m\]'
    if [ `id -u` -eq 0 ]; then PCHAR='#'; UC='\[\e[1;33;41m\]' ; else UC='\[\e[0;36;40m\]' ; fi
    PS1="
\[\e[1;31;40m\][\[\e[1;32;40m\]\$(date '+%I:%M')\[\e[1;32;40m\] \$(date '+%D')\$(display_git_branch)\[\e[1;31;40m\]]\[\e[0;0;00m\]
\[\e[1;31;40m\][${UC}\u\[\e[0;31;40m\]@\[\e[0;36;40m\]\h\[\e[1;32;44m\] \w\[\e[1;31;40m\]]\[\e[0;0;00m\]
\[\e[0;37;40m\]${PCHAR}\[\e[0;0;00m\] " 
    export PS1
}


#------------------------------------------------------------------
# set path explicity to add $HOME/bin if it exists
# this allows for custom user scripts to be placed in the user's path
#------------------------------------------------------------------
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
test -d $HOME/bin && PATH=$PATH:$HOME/bin
export PATH


#------------------------------------------------------------------
# aliases
#------------------------------------------------------------------
# [git]
alias gbr="git branch -a"
alias gco="git checkout"
alias gst="git status -s"
alias gls="git ls-tree --full-tree -r --name-only HEAD"
alias gpull='git pull origin `get_git_branch`'
alias gpush='git push origin `get_git_branch`; git push origin --tags'
alias glog='git log --pretty --oneline'
# [docker]
alias dcl='docker container ls -a'
alias dil='docker image ls -a'


# uncomment to run the update report on login
pkg_update_report

# uncomment to report on age of system password
check_password_age

