#
# user modify-able bashrc
#
#------------------------------------------------------------------
# display git branch in prompt if cwd is a repo. color change if
# modifications present
#------------------------------------------------------------------
display_git_branch()
{
   bcolor="\033[0;30;42m" # normally black on green. yellow on red if mods
   test $(is_branch_modified) -eq 1 && bcolor="\033[1;33;41m"

   b="`git branch 2> /dev/null | grep '^*' |  sed -e '#^[^*]#d' -e 's#[*\(\) ]##g'`"
   test ! -z "$b" &&  echo -e "$bcolor $b \033[0;00;0m"
}


#------------------------------------------------------------------
# returns 1 if git branch in current dirctory has been modified
#------------------------------------------------------------------
is_branch_modified()
{
   status=0
   test -n "`git diff 2>/dev/null`" && status=1
   echo $status
}

#------------------------------------------------------------------
# for use with gpull and other aliasse
#------------------------------------------------------------------
get_git_branch()
{
    git branch 2> /dev/null | grep '^*' |  sed -e '#^[^*]#d' -e 's#[*\(\) ]##g'
}


#------------------------------------------------------------------
# show git branches both remote and local
#------------------------------------------------------------------
git_show_branches() {
    remote_branches="$(git ls-remote --heads origin)"
    git branch -a
    echo -e "\033[38;5;202m+++ REMOTE BRANCHES +++\033[0m"
    echo -e "\033[38;5;208m$remote_branches\033[0m"
}

#------------------------------------------------------------------
# count the number of updates in /var/cache/apt/archives and report
# this can be run by hand, or called from a script
#------------------------------------------------------------------
pkg_update_report()
{
   local deb_count
   deb_count=$(ls -1 /var/cache/apt/archives/*.deb 2>/dev/null | wc -l)

   if [ "$deb_count" -gt 0 ]; then
      echo -e "There are \e[92m$deb_count downloaded packages \e[0min the deb archive on this system.\e[0m"
   fi
}

#------------------------------------------------------------------
# report on age of current password
# only works with local users
#------------------------------------------------------------------
check_password_age() {

   # this won't work with some systems using AD auth since it requires sudo
   `test -n `grep $(whoami) /etc/passwd &>/dev/null`` || return

   # Constants
   age_warning_days=75
   age_critical_days=90


   local username="$1"
   local verbose="$2" # pass -v to always report

   # no username, assume the user running the function
   test -z "$username" && username=$LOGNAME

   # if -v passed as "$1", assume LOGNAME and verbose mode
   if [ "$username" = "-v" ];then
      username=$LOGNAME
      verbose="-v"
   fi

   # Get the password aging information using chage
   local password_info=$(chage -l "$username" 2>/dev/null)

   if [[ -n "$password_info" ]]; then

       # Extract the last password change date
       local last_change=$(echo "$password_info" | grep "Last password change" | awk -F ': ' '{print $2}')

       if [[ -n "$last_change" ]]; then
           # Calculate the age of passwd in days
           local current_date=$(date +%s)
           local last_change_date=$(date -d "$last_change" +%s)
           local age_seconds=$((current_date - last_change_date))
           local age_days=$((age_seconds / 86400))  # 86400 seconds in a day

           # Determine color based on age of pass
           local color_code=""
           if (( age_days > age_critical_days )); then
               color_code="\033[91m"  # Red color
           elif (( age_days > age_warning_days )); then
               color_code="\033[93m"  # Yellow color
           fi

           # Determine if output should be printed
           local output=false
           if [[ "$verbose" == "-v" || age_days -gt $age_warning_days ]]; then
               output=true
           fi

           # Print output if necessary
           if [[ "$output" == true ]]; then
               echo -e "${color_code}Current password age for user $username is approximately $age_days days.\033[0m"
           fi

       else
           echo "Error: Failed to retrieve last password change date."
       fi
   else
       echo "Error: User $username not found or unable to retrieve password aging information."
   fi
}



#------------------------------------------------------------------
# create a tmux session for terminal sharing between logged-in users
#------------------------------------------------------------------
tmux_share() {

    # Define color codes
    local GREEN='\033[0;32m'
    local YELLOW='\033[1;33m'
    local CYAN='\033[0;36m'
    local NC='\033[0m' # No Color

    # Generate a random 4-digit number
    local random_prefix=$(shuf -i 1000-9999 -n 1)

    # Create the session name using the random prefix
    local session_name="shared-${random_prefix}"

    # Print message with color
    echo -e "${CYAN}Starting new shared tmux session...${NC}"

    # Create a new tmux session in detached mode
    tmux new-session -d -s "$session_name"

    # Print the command to connect to the shared session with color
    echo -e "${YELLOW}To connect to the shared tmux session, use the following command:${NC}"
    echo -e "${GREEN}tmux attach-session -t $session_name${NC}"
}


#------------------------------------------------------------------
# launch ssh-agent, add ssh keys to ssh-agent
#------------------------------------------------------------------
shad()
{
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/*_{rsa,ed25519}
}



#------------------------------------------------------------------
# enable a color prompt with git repo awareness
# temporarily change prompt color: pcol rand
#------------------------------------------------------------------
function pcol() {
    PCHAR='$'; UC='\[\e[0;36;40m\]'
    if [ `id -u` -eq 0 ]; then PCHAR='#'; UC='\[\e[1;33;41m\]'; fi

    # Define color codes
    BOLD_CYAN='\[\e[1;36;40m\]'
    BOLD_PURPLE='\[\e[1;35;40m\]'
    RESET='\[\e[0m\]'
    BOLD_GREEN='\[\e[0;32;40m\]'
    BOLD_MAGENTA='\[\e[1;35;40m\]'
    BOLD_YELLOW='\[\e[1;33;40m\]'
    LIGHT_GRAY='\[\e[0;37;40m\]'
    BOLD_RED='\[\e[1;31;40m\]'
    BOLD_BLUE='\[\e[1;34;40m\]'
    BOLD_WHITE='\[\e[1;37;40m\]'
    LIGHT_RED='\[\e[0;31;40m\]'
    LIGHT_GREEN='\[\e[0;32;40m\]'
    LIGHT_YELLOW='\[\e[0;33;40m\]'
    LIGHT_BLUE='\[\e[0;34;40m\]'
    LIGHT_MAGENTA='\[\e[0;35;40m\]'
    LIGHT_CYAN='\[\e[0;36;40m\]'

    # Create an array of colors
    colors=(
        "$BOLD_CYAN"
        "$BOLD_PURPLE"
        "$BOLD_GREEN"
        "$BOLD_MAGENTA"
        "$BOLD_YELLOW"
        "$LIGHT_GRAY"
        "$BOLD_RED"
        "$BOLD_BLUE"
        "$BOLD_WHITE"
        "$LIGHT_RED"
        "$LIGHT_GREEN"
        "$LIGHT_YELLOW"
        "$LIGHT_BLUE"
        "$LIGHT_MAGENTA"
        "$LIGHT_CYAN"
    )

    # Randomly choose colors for each component - run: pcol rand
    if [ "$1" == "rand" ]; then
        # Randomly choose colors for each component
        RANDOM_COLOR_BRACKET=${colors[RANDOM % ${#colors[@]}]}
        RANDOM_COLOR_DATE=${colors[RANDOM % ${#colors[@]}]}
        RANDOM_COLOR_USER=${colors[RANDOM % ${#colors[@]}]}
        RANDOM_COLOR_HOST=${colors[RANDOM % ${#colors[@]}]}
        RANDOM_COLOR_DIR=${colors[RANDOM % ${#colors[@]}]}

        # User-specific prompt components
        TIME_DATE="${RANDOM_COLOR_BRACKET}[${RANDOM_COLOR_DATE}\$(date '+%I:%M') \$(date '+%D')\$(display_git_branch)${RANDOM_COLOR_BRACKET}]${RESET}"
        USER_HOST="${RANDOM_COLOR_BRACKET}[${RANDOM_COLOR_USER}\u${RANDOM_COLOR_HOST}@docker-\h üê≥${RANDOM_COLOR_DIR} \w${RANDOM_COLOR_BRACKET}]${RESET}"
        PCHAR="${LIGHT_GRAY}${PCHAR}${RESET}"
    else
        # Default color scheme
        TIME_DATE="[${BOLD_CYAN}\$(date '+%I:%M') \$(date '+%D')\$(display_git_branch)${BOLD_CYAN}]${RESET}"
        USER_HOST="[${BOLD_CYAN}${UC}\u${BOLD_GREEN}@${BOLD_MAGENTA}docker-\h üê≥${BOLD_YELLOW} \w${BOLD_CYAN}]${RESET}"
        PCHAR="${LIGHT_GRAY}${PCHAR}${RESET}"
    fi

    # Combine components into multi-line PS1 without escapes
    PS1="\n${TIME_DATE}\n${USER_HOST}\n${PCHAR} "
    export PS1
}


#------------------------------------------------------------------
# set path explicity to add $HOME/bin if it exists
# this allows for custom user scripts to be placed in the user's path
#------------------------------------------------------------------
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
test -d $HOME/bin && PATH=$PATH:$HOME/bin
export PATH

#------------------------------------------------------------------
# ubuntu default is nano
#------------------------------------------------------------------
# use vim or nano for things like cron and git commits
export EDITOR=vim

#------------------------------------------------------------------
# disable caps lock as I always inadvertently hit it when entering masked passwords
# also see: xmodmap ~/.Xmodmap
#------------------------------------------------------------------
/usr/bin/setxkbmap -option ctrl:nocaps
setxkbmap -option ctrl:nocaps

#------------------------------------------------------------------
# aliases
#------------------------------------------------------------------
# [ssh]
# a shortcut for use with temporary hosts
alias sshoi='ssh -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes'


# [git]
alias gbr="git_show_branches"
alias gco="git checkout"
alias gst="git status -s"
alias gls="git ls-tree --full-tree -r --name-only HEAD"
alias gpull='git pull origin `get_git_branch`'
alias gpush='git push origin `get_git_branch`; git push origin --tags'
alias glog='git log --pretty --oneline'

# [docker]
alias dcl='docker container ls -a'
alias dil='docker image ls -a'

# [system]
alias dir="ls -lart --color=yes"
alias tmush="tmux_share"
# root login with ENV initialized
alias sbl='sudo -i -u root /bin/bash --login'

# -------------------------------------------------------------------

# uncomment to run the update report on login
# pkg_update_report

# uncomment to report on age of system password
# check_password_age

# uncomment to enable color prompt
# pcol
